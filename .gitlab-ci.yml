stages:
  - build
  - test
  - deploy

variables:
  IMAGE_TAG: $DOCKER_USERNAME/todo-app:latest
  # Use consistent variable names that match Django settings
  DB_NAME: todo_test_db
  DB_USER: todo_user
  DB_PASSWORD: secretpassword
  DB_HOST: postgres
  DB_PORT: "5432"

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - rm -f /root/.docker/config.json
  only:
    - main

test:
  stage: test
  image: python:3.13
  services:
    - name: postgres:15
      alias: postgres
  variables:
    # Override PostgreSQL service variables
    POSTGRES_DB: todo_test_db
    POSTGRES_USER: todo_user  
    POSTGRES_PASSWORD: secretpassword
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    # Install system dependencies
    - apt-get update && apt-get install -y libpq-dev gcc postgresql-client
    - pip install --upgrade pip
    - pip install -r requirements.txt
    
    # Wait for PostgreSQL to be ready
    - until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do echo "Waiting for Postgres..."; sleep 1; done
    
    # Create database if it doesn't exist
    - PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -c "CREATE DATABASE $DB_NAME"
    
    # Run migrations
    - python manage.py migrate --run-syncdb
  script:
    # HERE ARE THE COVERAGE COMMANDS:
    - coverage run --source='.' manage.py test
    - coverage report
    - coverage xml
    # Show coverage percentage in GitLab
    - coverage report | tail -1 | awk '{print "Coverage: " $4}'
  coverage: '/TOTAL.*\s+(\d+%)$/'
  only:
    - main

deploy:
  stage: deploy
  script:
    - echo "Deployment successful"
  only:
    - main